
function timestringToTable (time) local dateTable = os.date("*t");  local g =  string.gmatch(time, "%d+"); local hour = g() ; local minute = g() or 0; local second = g() or 0;  dateTable["hour"] = hour; dateTable["min"] = minute; dateTable["sec"] = second; return(dateTable);end;
function tableToEpochtime (t) local now = os.date("*t"); local outTime = os.time{year=t.year or now.year, month=t.month or now.month,day=t.day or now.day,hour=t.hour or now.hour,min=t.min or now.min,sec=t.sec or now.sec,isdst=t.isdst or now.isdst}; return(outTime);end;
function isTime (timeString, offsetMinutes, secondsWindow) local timeTable = timestringToTable(timeString); local timeEpoch = tableToEpochtime (timeTable); local timeWithOffset = timeEpoch + (offsetMinutes * 60); local now = os.time(); return ( math.abs(timeWithOffset - now) <= secondsWindow );end;
function isInTimeRange (startTimeString, endTimeString) local startTimeTable = timestringToTable(startTimeString); local endTimeTable = timestringToTable(endTimeString); local startTimeEpoch = tableToEpochtime (startTimeTable); local endTimeEpoch = tableToEpochtime (endTimeTable); local now = os.time(); return ( (startTime <= now ) and (endTime >= now));end;
function isDayOfWeek (dayList) local today = os.date("%a",os.time()); local longToday = os.date("%A",os.time()); for i, v in ipairs(dayList) do if today == v or longToday == v then return(true); end; end; return(false);end;
function isWeekDay () local today = tonumber(os.date("%w",os.time()));  return (not (today == 0 or today == 6));end;
function isWeekEnd () local today = tonumber(os.date("%w",os.time())); return (today == 0 or today == 6);end;
function beforeTime(time) local timeEpoch = tableToEpochtime(timestringToTable(time)); local startOfDay = tableToEpochtime(timestringToTable("00:00")); local now = os.time(); return( (now < timeEpoch) and (now >= startOfDay ));end;
function afterTime(time) local timeEpoch = tableToEpochtime(timestringToTable(time)); local endOfDay = tableToEpochtime(timestringToTable("23:59:59")); local now = os.time(); return( (now > timeEpoch) and (now <= endOfDay ));end;
function datetimeTableTrue (dateTable) local nowTodayTable = os.date("*t"); local scorekeeper = false; for k,v in pairs(dateTable) do  if type (v) == "number" then if not (nowTodayTable[k] == dateTable[k]) then return(false); end; elseif type (v) == "table" then  for ki, vi in pairs(v) do if (nowTodayTable[k] == v[ki]) then scorekeeper = true; end; end; if not scorekeeper then return(false) end; scorekeeper = false; else if not debug == nil then fibaro:debug("List of options in a field in the table should only contain numbers") else error("List of options in a field in the table should only contain numbers") end; end; end; return(true);end;
function myTimer(shouldRun, functionToRun, sleepSeconds ) local delay = sleepSeconds or 60; if (fibaro:countScenes() > 1 and shouldRun ) then functionToRun(); fibaro:sleep(delay*1000); end;end;
function timeToStartCarHeater (readyTime, tempOutside, eco, heaterON) local timeEpoch = tableToEpochtime(timestringToTable(readyTime)); local now = os.time(); local heaterStarted = heaterON or false; local startTime = timeEpoch; if (eco) then if (tempOutside <= -15) then  startTime = timeEpoch - (3600*2) elseif (tempOutside <= -10) then  startTime = timeEpoch - (3600*1) elseif (tempOutside <= 0) then  startTime = timeEpoch - (3600*1) elseif (tempOutside <= 10) then  startTime = timeEpoch - (3600*0.5) else  return(false); end; else if (tempOutside <= -20) then  startTime = timeEpoch - (3600*3) elseif (tempOutside <= -10) then  startTime = timeEpoch - (3600*2) elseif (tempOutside <= 0) then  startTime = timeEpoch - (3600*1) elseif (tempOutside <= 10) then  startTime = timeEpoch - (3600*1) else  return(false); end; end;  return ( (not heaterON) and (startTime <= now) and (now <= timeEpoch));end;
function shouldStopHeater (heaterOnTime, autoOffTime, blockedByOutsideTemperature) local now = os.time();   local notblock = (not blockedByOutsideTemperature) or false; return (  notblock  or  ( now - heaterOnTime ) >= (3600 * autoOffTime) );end;
function startedManually () local startSource = fibaro:getSourceTrigger(); return( startSource["type"] == "other");end;
function startedByVariable () local startSource = fibaro:getSourceTrigger(); if startSource["type"] == "global" then return (startSource["name"]); else return false; end;end;
function startedByDevice () local startSource = fibaro:getSourceTrigger();  if startSource["type"] == "property" then return ({deviceID=startSource["deviceID"], propertyName=startSource["propertyName"]}); else return false; end;end;
function notCurrentlyRunning() local sceneCount = fibaro:countScenes(); return (sceneCount == 1);end;
nodonSceneTableVerbose = { [10]="Button 1 Single Press", [20]="Button 2 Single Press", [30]="Button 3 Single Press", [40]="Button 4 Single Press", [13]="Button 1 Double Press", [23]="Button 2 Double Press", [33]="Button 3 Double Press", [43]="Button 4 Double Press", [12]="Button 1 Hold Press", [22]="Button 2 Hold Press", [32]="Button 3 Hold Press", [42]="Button 4 Hold Press", [11]="Button 1 Hold Released", [21]="Button 2 Hold Released", [31]="Button 3 Hold Released", [41]="Button 4 Hold Released"};
nodonSceneTable = { [10]="1SP", [20]="2SP", [30]="3SP", [40]="4SP", [13]="1DP", [23]="2DP", [33]="3DP", [43]="4DP", [12]="1HP", [22]="2HP", [32]="3HP", [42]="4HP", [11]="1HR", [21]="2HR", [31]="3HR", [41]="4HR"};
zwavemeSceneTableVerbose = { [11]="Button 1 Single Click", [21]="Button 2 Single Click", [31]="Button 3 Single Click", [41]="Button 4 Single Click", [12]="Button 1 Double Click", [22]="Button 2 Double Click", [32]="Button 3 Double Click", [42]="Button 4 Double Click", [13]="Button 1 Press and hold", [23]="Button 2 Press and hold", [33]="Button 3 Press and hold", [43]="Button 4 Press and hold", [14]="Button 1 Click and then Press and hold", [24]="Button 2 Click and then Press and hold", [34]="Button 3 Click and then Press and hold", [44]="Button 4 Click and then Press and hold", [15]="Button 1 Click and then Press and hold", [25]="Button 2 Click and then Press and hold", [35]="Button 3 Click and then Press and hold", [45]="Button 4 Click and then Press and hold", [16]="Button 1 Click and then Press and hold long time", [26]="Button 2 Click and then Press and hold long time", [36]="Button 3 Click and then Press and hold long time", [46]="Button 4 Click and then Press and hold long time"};
zwavemeSceneTable = { [11]="1SC", [21]="2SC", [31]="3SC", [41]="4SC", [12]="1DC", [22]="2DC", [32]="3DC", [42]="4DC", [13]="1PH", [23]="2PH", [33]="3PH", [43]="4PH", [14]="1C_PH", [24]="2C_PH", [34]="3C_PH", [44]="4C_PH", [15]="1PLH", [25]="2PLH", [35]="3PLH", [45]="4PLH", [16]="1C_PLH", [26]="1C_PLH", [36]="1C_PLH", [46]="1C_PLH"};